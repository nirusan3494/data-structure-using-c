#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 100

char infix[SIZE];
char postfix[SIZE];
char stack[SIZE];
int top = -1;

void push(char value) {
    if (top == SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = value;
}

char pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return '\0';
    }
    return stack[top--];
}

int isEmpty() {
    return top == -1;
}

int precedence(char symbol) {
    switch (symbol) {
        case '^': return 3;
        case '*':
        case '/': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

void infix_to_postfix() {
    int i, j = 0;
    char symbol, next;

    for (i = 0; i < strlen(infix); i++) {
        symbol = infix[i];

        if (isalnum(symbol)) {
            postfix[j++] = symbol;
        }
        else if (symbol == '(') {
            push(symbol);
        }
        else if (symbol == ')') {
            while (!isEmpty() && (next = pop()) != '(') {
                postfix[j++] = next;
            }
        }
        else {
            while (!isEmpty() && precedence(stack[top]) >= precedence(symbol)) {
                postfix[j++] = pop();
            }
            push(symbol);
        }
    }

    while (!isEmpty()) {
        postfix[j++] = pop();
    }

    postfix[j] = '\0';
}

void printPostfix() {
    printf("The equivalent postfix expression is: %s\n", postfix);
}

int main() {
    printf("Enter the infix expression: ");
    scanf("%s", infix);

    infix_to_postfix();
    printPostfix();

    return 0;
}
