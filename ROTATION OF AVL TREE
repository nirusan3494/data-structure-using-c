#include <stdio.h>
#include <stdlib.h>

// Structure of AVL Node
struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};

// to get height of the tree
int getHeight(struct Node *n) {
    if (n == NULL)
        return 0;
    else
        return n->height;
}

// to create node for insertion
struct Node *createNode(int key) {
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; // initialize height properly
    return node;
}

int max(int a, int b) {
    return a > b ? a : b;
}

// To get balance factor(left height-right height)
int getBalanceFactor(struct Node *n) {
    if (n == NULL) {
        return 0;
    }
    return getHeight(n->left) - getHeight(n->right);
}

//------rotation starts from here-------
/*      y
       / \
      x   T3
     / \
   T1  T2
    */
// This is RIGHT rotation
struct Node *rightRotate(struct Node *y) {
    struct Node *x = y->left;
    struct Node *T2 = x->right;

    x->right = y;
    y->left = T2;

    /*the height of x or y after rotation is (+1)w.r.t height either on
    left or right branch; branch with more height is taken for calculation*/
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x; // x has become root node now
}

/*      x
       / \
     T1   y
         / \
       T2  T3
*/
// This is LEFT rotation
struct Node *leftRotate(struct Node *x) {
    struct Node *y = x->right;
    struct Node *T2 = y->left;

    y->left = x;
    x->right = T2;

    /*the height of x or y after rotation is (+1)w.r.t height either on
    left or right branch; branch with more height is taken for calculation*/
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

// BST insertion + AVL balancing
struct Node *insert(struct Node *node, int key) {
    // Normal BST insertion
    if (node == NULL)
        return createNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // duplicate keys not allowed

    // Update height after insertion
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));

    // Get balance factor
    int bf = getBalanceFactor(node);

    // Left Left case
    if (bf > 1 && key < node->left->key) {
        return rightRotate(node);
    }

    // Right Right case
    if (bf < -1 && key > node->right->key) {
        return leftRotate(node);
    }

    // Left Right Case
    if (bf > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left Case
    if (bf < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node; // no rotation needed
}

// Preorder traversal
void preOrder(struct Node *root) {
    if (root != NULL) {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}

// Main function
int main() {
    struct Node *root = NULL;
    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 3);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 7);
    root = insert(root, 9);
    root = insert(root, 10);

    preOrder(root); // preorder traversal output

    return 0;
}
